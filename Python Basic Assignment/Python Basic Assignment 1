{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. In the below elements which of them are values or an expression? eg:- values can be\n",
    "integer or string and expressions will be mathematical operators."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(*)  :  expression\n",
    "hello : values\n",
    "-87.8 : values\n",
    "- : expression\n",
    "/ : expression\n",
    "+ : expression\n",
    "6 : values"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. What is the difference between string and variable?"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* A Variable is nothing but a programming element used to define, store, and perform operations on the input data.python variables are of four different types: Integer, Long Integer, Float, and String. Integers are used to define numeric values; Long Integers are used for defining integers with bigger lengths than a normal Integer. Floats are used for defining decimal values, and Strings are used for defining characters.Like other programming, languages python does not expect a static variable declaration along with the type of the variable being handled. Instead, python has the ability to determine the type of the variable just based on the type of value being stored in it.\n",
    "* A string is a data structure in Python that represents a sequence of characters. It is an immutable data type, meaning that once you have created a string, you cannot change it. Strings are used widely in many different applications, such as storing and manipulating text data, representing names, addresses, and other types of data that can be represented as text."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Describe three different data types."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Numeric-  numeric data type represent the data which has numeric value and it is sub divided in three category\n",
    "  * integers - it contain positive or negative whole number and we can say in short without decimal numeric value.\n",
    "  * float - it contain decimals\n",
    "  * complex numbers - Complex number is represented by complex class. It is specified as (real part) + (imaginary part)j. For example â€“ 2+3j\n",
    "\n",
    "##### Boolean- Data type with one of the two built-in values, True or False.\n",
    "##### Sequence - sequence is the ordered collection of similar or different data types. Sequences allows to store multiple values in an organized and efficient fashion. There are several sequence types in Python.\n",
    "  * String - A string is a collection of one or more characters put in a single quote, double-quote or triple quote. In python there is no character data type, a character is a string of length one. It is represented by str class.\n",
    "  * List - Lists are just like the arrays, declared in other languages which is a ordered collection of data. It is very flexible as the items in a list do not need to be of the same type.\n",
    "  * Tuple-  tuple is also an ordered collection of Python objects. The only difference between tuple and list is that tuples are immutable i.e. tuples cannot be modified after it is created. It is represented by tuple class."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4. What is an expression made up of? What do all expressions do?"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### An expression is a combination of values, variables, operators, and calls to functions. Expressions need to be evaluated. If you ask Python to print an expression, the interpreter evaluates the expression and displays the result.\n",
    "##### There are various types of expression in Python.\n",
    "Constant Expressions - A constant expression in Python that contains only constant values is known as a constant expression. In a constant expression in Python, the operator(s) is a constant. A constant is a value that cannot be changed after its initialization. example : x=10+15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of x is:  25\n"
     ]
    }
   ],
   "source": [
    "x = 10 + 15\n",
    "\n",
    "# Here both 10 and 15 are constants but x is a variable.\n",
    "print(\"The value of x is: \", x)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Arithmetic Expressions - An expression in Python that contains a combination of operators, operands, and sometimes parenthesis is known as an arithmetic expression. The result of an arithmetic expression is also a numeric value just like the constant expression discussed above. Before getting into the example of an arithmetic expression in Python, let us first know about the various operators used in the arithmetic expressions.\n",
    "\n",
    "| operators | sytax | working|\n",
    "|-|-|-|\n",
    "|+|x + y|Addition or summation of x and y|\n",
    "|-|x - y|Subtraction of y from x|\n",
    "|x|x x y|Multiplication or product of x and y|\n",
    "|/|x / y|Division of x and y|\n",
    "|//|x // y|Quotient when x is divided by y|\n",
    "|%|x % y|Remainder when x is divided by y|\n",
    "|**|x ** y|Exponent (x to the power of y)|\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of x and y is:  15\n",
      "The difference between x and y is:  5\n",
      "The product of x and y is:  50\n",
      "The division of x and y is:  2.0\n",
      "x to the power y is:  100000\n"
     ]
    }
   ],
   "source": [
    "x = 10\n",
    "y = 5\n",
    "\n",
    "addition = x + y\n",
    "subtraction = x - y\n",
    "product = x * y\n",
    "division = x / y\n",
    "power = x**y\n",
    "\n",
    "print(\"The sum of x and y is: \", addition)\n",
    "print(\"The difference between x and y is: \", subtraction)\n",
    "print(\"The product of x and y is: \", product)\n",
    "print(\"The division of x and y is: \", division)\n",
    "print(\"x to the power y is: \", power)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Relational Expressions- A relational expression in Python can be considered as a combination of two or more arithmetic expressions joined using relational operators. The overall expression results in either True or False (boolean result). We have four types of relational operators in Python(i.e. >,<,>=,<=)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Logical Expressions - a logical expression performs the logical computation, and the overall expression results in either True or False (boolean result). We have three types of logical expressions in Python, let us discuss them briefly.\n",
    "\n",
    "|keywords | syntax|Working|\n",
    "|-|-|-|\n",
    "|not   | not x   | The expression returns True if the condition of x is false| # it means false contion\n",
    "|and    | x and y  | The expression return True if both x and y are true, else it returns False.|\n",
    "|or      | x or y | he expression return True if at least one of x and y is True|"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Combinational Expressions - a combination expression can contain a single or multiple expressions which result in an integer or boolean value depending upon the expressions involved.\n",
    "\n",
    "Example :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result obtained :  95\n"
     ]
    }
   ],
   "source": [
    "x = 25\n",
    "y = 35\n",
    "\n",
    "result = x + (y << 1)\n",
    "\n",
    "print(\"Result obtained : \", result)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. This assignment statements, like spam = 10. What is the difference between an expression and a statement?"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> An expression evaluates to a single value. A statement does not."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6. After running the following code, what does the variable bacon contain?\n",
    "bacon = 22\n",
    "bacon + 1"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> The bacon variable is set to 20. The bacon + 1 expression does not reassign the value in bacon (that would need an assignment statement: bacon = bacon + 1)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 8. Why is eggs a valid variable name while 100 is invalid?"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Variable names cannot begin with a number."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 9. What three functions can be used to get the integer, floating-point number, or string version of a value?"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> The int(), float(), and str() functions will evaluate to the integer, floating-point number, and string versions of the value passed to them."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 10. Why does this expression cause an error? How can you fix it?\n",
    "I have eaten &#39; + 99 + &#39; burritos.&#39;"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> The expression causes an error because 99 is an integer, and only strings can be concatenated to other strings with the + operator. The correct way is I have eaten ' + str(99) + ' burritos.'."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
